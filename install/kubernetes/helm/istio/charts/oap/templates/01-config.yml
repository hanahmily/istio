apiVersion: v1
kind: ConfigMap
metadata:
  name: oap-config
  namespace: {{.Release.Namespace}}
data:
  envoy.yaml: |
    admin:
      access_log_path: /tmp/admin_access.log
      address:
        socket_address: { address: 0.0.0.0, port_value: 50001 }
    static_resources:
      listeners:
      - name: es_listener
        address:
          socket_address: { address: 0.0.0.0, port_value: 9200 }
        filter_chains:
        - filters:
          - name: envoy.http_connection_manager
            config:
              stat_prefix: elasticsearch
              codec_type: AUTO
              route_config:
                name: local_route
                request_headers_to_add:
                - header:
                    key: tcc-route-target
                    value: elasticsearch
                {{- if .Values.token }}
                - header:
                    key: x-tetrate-token
                    value: "$token"
                {{- end }}
                virtual_hosts:
                - name: local_service
                  domains: ['*']
                  routes:
                  - match: { prefix: '/' }
                    route: { cluster: elasticsearch }
              http_filters:
              - name: envoy.router
      - name: oap_tcc_listener
        address:
          socket_address: { address: 0.0.0.0, port_value: 21800 }
        filter_chains:
        - filters:
          - name: envoy.http_connection_manager
            config:
              stat_prefix: oap_tcc
              codec_type: AUTO
              route_config:
                name: local_route
                request_headers_to_add:
                {{- if .Values.token }}
                - header:
                    key: x-tetrate-token
                    value: "$token"
                {{- end }}
                virtual_hosts:
                - name: local_service
                  domains: ['*']
                  routes:
                  - match: { prefix: '/' }
                    route: { cluster: oap-tcc }
              http_filters:
              - name: envoy.router
      {{- if .Values.externalServices.metadata.enabled }}
      - name: ex_metadata_listener
        address:
          socket_address: { address: 0.0.0.0, port_value: 9080 }
        filter_chains:
        - filters:
          - name: envoy.http_connection_manager
            config:
              stat_prefix: ex_metadata
              codec_type: AUTO
              route_config:
                name: local_route
                request_headers_to_add:
                {{- if .Values.token }}
                - header:
                    key: x-tetrate-token
                    value: "$token"
                {{- end }}
                virtual_hosts:
                - name: local_service
                  domains: ['*']
                  routes:
                  - match: { prefix: '/' }
                    route: { cluster: oap-tcc }
              http_filters:
              - name: envoy.router
      {{- end }}
      {{- if .Values.externalServices.configuration.enabled }}
      - name: ex_configuraion_listener
        address:
          socket_address: { address: 0.0.0.0, port_value: 9081 }
        filter_chains:
        - filters:
          - name: envoy.http_connection_manager
            config:
              stat_prefix: ex_configuration
              codec_type: AUTO
              route_config:
                name: local_route
                request_headers_to_add:
                {{- if .Values.token }}
                - header:
                    key: x-tetrate-token
                    value: "$token"
                {{- end }}
                virtual_hosts:
                - name: local_service
                  domains: ['*']
                  routes:
                  - match: { prefix: '/' }
                    route: { cluster: oap-tcc }
              http_filters:
              - name: envoy.router
      {{- end }}
      clusters:
      - name: elasticsearch
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        {{- if .Values.global.elasticsearch.ssl.enabled }}
        tls_context: {}
        {{- end }}
        hosts:
        - socket_address:
            address: {{ .Values.elasticsearch.host }}
            port_value: {{ .Values.elasticsearch.port }}
      - name: oap-tcc
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        tls_context: {}
        http2_protocol_options: {}
        hosts:
        - socket_address:
            address: {{ .Values.global.tcc.host }}
            port_value: {{ .Values.global.tcc.port }}
  log4j2.xml: |-
    <Configuration status="WARN">
        <Appenders>
            <Console name="Console" target="SYSTEM_OUT">
                <PatternLayout charset="UTF-8" pattern="%d - %c -%-4r [%t] %-5p %x - %m%n"/>
            </Console>
        </Appenders>
        <Loggers>
            <logger name="org.eclipse.jetty" level="INFO"/>
            <logger name="org.apache.zookeeper" level="INFO"/>
            <logger name="org.elasticsearch.common.network.IfConfig" level="INFO"/>
            <logger name="io.grpc.netty" level="INFO"/>
            <logger name="org.apache.skywalking.oap.server.receiver.istio.telemetry" level="INFO"/>
            <!-- uncomment following line when need to debug ALS raw data
            <logger name="io.tetrate.spm.user.receiver.envoy" level="DEBUG"/>
            -->
            <Root level="{{ default "WARN" .Values.logLevel }}">
                <AppenderRef ref="Console"/>
            </Root>
        </Loggers>
    </Configuration>

  official_analysis.oal: |-

    // Service scope metric
    service_heatmap = from(Service.latency).thermodynamic(100, 20);
    service_resp_time = from(Service.latency).longAvg();
    service_sla = from(Service.*).percent(status == true);
    service_cpm = from(Service.*).cpm();
    service_apdex = from(Service.latency).apdex(name, status);
    service_percentile = from(Service.latency).percentile(10); // Multiple values including p50, p75, p90, p95, p99

    service_status_code = from(Service.*).statusCode(responseCode);
    service_2xx = from(Service.*).filter(responseCode >= 200).filter(responseCode < 400).cpm();
    service_4xx = from(Service.*).filter(responseCode >= 400).filter(responseCode < 500).cpm();
    service_5xx = from(Service.*).filter(responseCode >= 500).cpm();

    // Service Instance relation scope metrics for topology
    service_instance_relation_client_cpm = from(ServiceInstanceRelation.*).filter(detectPoint == DetectPoint.CLIENT).cpm();
    service_instance_relation_server_cpm = from(ServiceInstanceRelation.*).filter(detectPoint == DetectPoint.SERVER).cpm();
    service_instance_relation_client_call_sla = from(ServiceInstanceRelation.*).filter(detectPoint == DetectPoint.CLIENT).percent(status == true);
    service_instance_relation_server_call_sla = from(ServiceInstanceRelation.*).filter(detectPoint == DetectPoint.SERVER).percent(status == true);
    service_instance_relation_client_resp_time = from(ServiceInstanceRelation.latency).filter(detectPoint == DetectPoint.CLIENT).longAvg();
    service_instance_relation_server_resp_time = from(ServiceInstanceRelation.latency).filter(detectPoint == DetectPoint.SERVER).longAvg();
    service_instance_relation_client_percentile = from(ServiceInstanceRelation.latency).filter(detectPoint == DetectPoint.CLIENT).percentile(10); // Multiple values including p50, p75, p90, p95, p99
    service_instance_relation_server_percentile = from(ServiceInstanceRelation.latency).filter(detectPoint == DetectPoint.SERVER).percentile(10); // Multiple values including p50, p75, p90, p95, p99

    // Service Instance Scope metric
    service_instance_sla = from(ServiceInstance.*).percent(status == true);
    service_instance_resp_time= from(ServiceInstance.latency).longAvg();
    service_instance_cpm = from(ServiceInstance.*).cpm();
    service_instance_apdex = from(ServiceInstance.latency).apdex(name, status);
    service_instance_percentile = from(ServiceInstance.latency).percentile(10); // Multiple values including p50, p75, p90, p95, p99

    service_instance_status_code = from(ServiceInstance.*).statusCode(responseCode);
    service_instance_2xx = from(ServiceInstance.*).filter(responseCode >= 200).filter(responseCode < 400).cpm();
    service_instance_4xx = from(ServiceInstance.*).filter(responseCode >= 400).filter(responseCode < 500).cpm();
    service_instance_5xx = from(ServiceInstance.*).filter(responseCode >= 500).cpm();

    // Service relation scope metric for topology
    service_relation_client_cpm = from(ServiceRelation.*).filter(detectPoint == DetectPoint.CLIENT).cpm();
    service_relation_server_cpm = from(ServiceRelation.*).filter(detectPoint == DetectPoint.SERVER).cpm();
    service_relation_client_call_sla = from(ServiceRelation.*).filter(detectPoint == DetectPoint.CLIENT).percent(status == true);
    service_relation_server_call_sla = from(ServiceRelation.*).filter(detectPoint == DetectPoint.SERVER).percent(status == true);
    service_relation_client_resp_time = from(ServiceRelation.latency).filter(detectPoint == DetectPoint.CLIENT).longAvg();
    service_relation_server_resp_time = from(ServiceRelation.latency).filter(detectPoint == DetectPoint.SERVER).longAvg();

    // Endpoint scope metric
    endpoint_cpm = from(Endpoint.*).cpm();
    endpoint_avg = from(Endpoint.latency).longAvg();
    endpoint_sla = from(Endpoint.*).percent(status == true);
    endpoint_apdex = from(Endpoint.latency).apdex(name, status);
    endpoint_percentile = from(Endpoint.latency).percentile(10); // Multiple values including p50, p75, p90, p95, p99

    endpoint_status_code = from(Endpoint.*).statusCode(responseCode);
    endpoint_2xx = from(Endpoint.*).filter(responseCode >= 200).filter(responseCode < 400).cpm();
    endpoint_4xx = from(Endpoint.*).filter(responseCode >= 400).filter(responseCode < 500).cpm();
    endpoint_5xx = from(Endpoint.*).filter(responseCode >= 500).cpm();

    // Disable unnecessary hard core sources
    /////////
    // disable(service_relation_server_side);
    // disable(service_relation_client_side);
    disable(segment);
    disable(endpoint_relation_server_side);
    disable(top_n_database_statement);
    disable(zipkin_span);
    disable(jaeger_span);
    disable(http_access_log);
    disable(profile_task);
    disable(profile_task_log);
    disable(profile_task_segment_snapshot);
  alarm-settings.yml: |-
    rules:
      # Rule unique name, must be ended with `_rule`.
      service_resp_time_rule:
        metrics-name: service_resp_time
        op: ">"
        threshold: 1000
        period: 10
        count: 3
        silence-period: 5
        message: Response time of service {name} is more than 1000ms in 3 minutes of last 10 minutes.
      service_sla_rule:
        # Metrics value need to be long, double or int
        metrics-name: service_sla
        op: "<"
        threshold: 8000
        # The length of time to evaluate the metrics
        period: 10
        # How many times after the metrics match the condition, will trigger alarm
        count: 2
        # How many times of checks, the alarm keeps silence after alarm triggered, default as same as period.
        silence-period: 3
        message: Successful rate of service {name} is lower than 80% in 2 minutes of last 10 minutes
      service_p90_sla_rule:
        # Metrics value need to be long, double or int
        metrics-name: service_p90
        op: ">"
        threshold: 1000
        period: 10
        count: 3
        silence-period: 5
        message: 90% response time of service {name} is more than 1000ms in 3 minutes of last 10 minutes
      service_instance_resp_time_rule:
        metrics-name: service_instance_resp_time
        op: ">"
        threshold: 1000
        period: 10
        count: 2
        silence-period: 5
        message: Response time of service instance {name} is more than 1000ms in 2 minutes of last 10 minutes
    webhooks:
      {{ .Values.externalServices.webhook.uri }}
